import time
start_time = time.time() #get our starting time
import math
# Answer: 76576500
# The sequence of triangle numbers is generated by adding 
# the natural numbers. So the 7th triangle number would be 
# 1+2+3+4+5+6+7 = 28. The first ten terms would be: 
# 1,3,6,10,15,21,28,36,45,55,...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  2: 3: 1, 3
#  3: 6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4,  7, 14, 28
# We can see that 28 is the first triangle number to have over five divisors.

def get_factors(tri):
    #we KNOW that 1 and the number are divisors
    factor_list =[1,tri]
    tri_sq_root = math.floor(math.sqrt(tri))
    for i in range(2,tri_sq_root):
        if(tri % i == 0):
            #this is a divisor! add it to the list
            factor_list.append(i)
            #we need the number ABOVE the sq. root
            factor_list.append(tri / i)
    return factor_list

#init factor_list so we can use it
factor_list = []
#init tri sequence
tri_sequence_num = 0
#init tri value 
tri_value = 0
#getting the next tri number until we have 500 divisors
# while(len(factor_list) < 500):
while(len(factor_list) < 500):
    # the 7th number is 28, 6 divisors
    tri_sequence_num += 1
    #we can get the next number by adding the old number
    #with the new sequence number
    tri_value += tri_sequence_num
    factor_list = get_factors(tri_value)
print(f"factor sequence: {tri_sequence_num}, tri value: {tri_value}, factors: {factor_list}")

end_time = time.time() #get our ending time
print(f"--- Number of seconds to solve {time.time() - start_time}")

